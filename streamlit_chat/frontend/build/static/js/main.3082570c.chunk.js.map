{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","props","args","isUser","isPicture","avatarStyle","seed","message","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","css","MessageDiv","fontFamily","font","flexFlow","Img","messages","Array","isArray","map","m","i","key","src","alt","draggable","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"qSASMA,E,4MACGC,OAAS,WACd,MAA0D,EAAKC,MAAMC,KAA7DC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,YAAaC,EAAxC,EAAwCA,KAAMC,EAA9C,EAA8CA,QACxCC,EAAS,2CAAuCH,EAAvC,YAAsDC,EAAtD,QAKPG,EAAU,EAAKR,MAAfQ,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,SACRC,MAAO,SACPC,OAAQ,IAIJC,EAAUP,IAAOQ,IAAI,CACzBC,QAAS,QACTC,WAAYZ,EAAMa,yBAClBT,OAAQ,wBACRC,aAAc,oBACdS,QAAS,YACTN,OAAQ,UACRO,SAAU,MACVR,MAAO,gBACN,SAACf,GACF,OAAOwB,YAAP,4NAEqBxB,EAAME,OAAS,oBAAsB,oBAGrCF,EAAME,OAAS,qBAAuB,yBAQvDuB,EAAaf,IAAOQ,IAAI,CAC5BH,MAAO,SACN,SAACf,GACF,OAAIA,EAAME,OACDsB,YAAP,kIAOKA,YAAP,6BAII1B,EAAOY,IAAOQ,IAAI,CACtBQ,WAAW,GAAD,OAAKlB,EAAMmB,KAAX,sCACVb,OAAQ,OACRE,OAAQ,EACRD,MAAO,OACPa,SAAU,WAEZ,SAAC5B,GACC,OAAIA,EAAME,OACDsB,YAAP,kEAIKA,YAAP,6BAGIK,EAAMnB,IAAOC,IAAI,CACrBY,SAAU,MACVJ,QAAS,QACTN,aAAc,oBACdG,OAAQ,YACP,SAAChB,GACF,OAAOwB,YAAP,mLACIxB,EAAME,OAAS,qBAAuB,sBAErBF,EAAME,OAAS,oBAAsB,oBAGrCF,EAAME,OAAS,qBAAuB,yBAQzD4B,EAAoC,GAexC,OAbEA,EADEC,MAAMC,QAAQ1B,GACLA,EAAQ2B,KAAI,SAACC,EAAWC,GACjC,OAAIhC,EAAUgC,GACL,kBAACN,EAAD,CAAKO,IAAKD,EAAGE,IAAKH,EAAGhC,OAAQA,IAE/B,kBAACe,EAAD,CAASf,OAAQA,EAAQkC,IAAKD,GAAID,MAGvC/B,EACS,kBAAC0B,EAAD,CAAKQ,IAAK/B,EAASJ,OAAQA,EAAQkC,IAAI,MAEvC,kBAACnB,EAAD,CAASf,OAAQA,EAAQkC,IAAI,KAAK9B,GAI/C,kBAAC,EAAD,CAAMJ,OAAQA,GACZ,kBAACO,EAAD,CAAQ4B,IAAK9B,EAAW+B,IAAI,UAAUC,UAAU,UAChD,kBAACd,EAAD,CAAYvB,OAAQA,GACjB4B,K,yBAvHQU,KA8HJC,cAAwB3C,GCnIvC4C,IAAS3C,OACP,kBAAC,IAAM4C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3082570c.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\n\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    const { isUser, isPicture, avatarStyle, seed, message } = this.props.args;\n    const avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n\n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '2.5rem',\n      width: '2.5rem',\n      margin: 0\n    })\n\n    // styles for the message box\n    const Message = styled.div({\n      display: 'block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '1px 10px 10px 1px',\n      padding: '10px 14px',\n      margin: '1px 5px',\n      maxWidth: '70%',\n      width: 'fit-content',\n    }, (props: { isUser: boolean }) => {\n      return css`\n        &:first-child {\n          border-radius: ${props.isUser ? '10px 1px 1px 10px' : '1px 10px 10px 1px'};\n        }\n        &:last-child {\n          border-radius: ${props.isUser ? '10px 1px 10px 10px' : '1px 10px 10px 10px'};\n        }\n        & * {\n          max-width: 100%;\n        }\n      `\n    })\n\n    const MessageDiv = styled.div({\n      width: '100%',\n    }, (props: {isUser: boolean}) => {\n      if (props.isUser) {\n        return css`\n          & div {\n            margin-left: auto;\n            margin-right: 0;\n          }\n        `\n      }\n      return css``\n    })\n\n    // styles for the container\n    const Chat = styled.div({\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%',\n      flexFlow: 'column'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          text-align: right;\n        `\n      }\n      return css``\n    })\n\n    const Img = styled.img({\n      maxWidth: '70%',\n      display: 'block',\n      borderRadius: '1px 10px 10px 1px',\n      margin: '1px 5px'\n    }, (props: { isUser: boolean }) => {\n      return css`\n        ${props.isUser ? 'margin-left: auto;' : 'margin-right: auto;'}\n        &:first-child {\n          border-radius: ${props.isUser ? '10px 1px 1px 10px' : '1px 10px 10px 1px'};\n        }\n        &:last-child {\n          border-radius: ${props.isUser ? '10px 1px 10px 10px' : '1px 10px 10px 10px'};\n        }\n      `\n    })\n\n    // The message variable could be an array of strings or a single string.\n    // If it's an array, we'll render each element as a separate message.\n    // If it's a string, we'll render it as a single message.\n    let messages: ReactNode[] | ReactNode = []\n    if (Array.isArray(message)) {\n      messages = message.map((m: string, i: number) => {\n        if (isPicture[i])\n          return <Img key={i} src={m} isUser={isUser} />\n\n        return <Message isUser={isUser} key={i}>{m}</Message>\n      })\n    } else {\n      if (isPicture)\n        messages = <Img src={message} isUser={isUser} key=\"0\" />\n      else\n        messages = <Message isUser={isUser} key=\"0\">{message}</Message>\n    }\n\n    return (\n      <Chat isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <MessageDiv isUser={isUser}>\n          {messages}\n        </MessageDiv>\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}