{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","Streamlit","setFrameHeight","window","innerHeight","props","args","isUser","avatarStyle","seed","message","allow_html","is_table","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","maxWidth","whiteSpace","fontFamily","font","css","remarkPlugins","remarkMath","remarkGfm","rehypePlugins","rehypeKatex","rehypeRaw","src","alt","draggable","rehypeHighlight","detect","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"8VAuBMA,G,0NACGC,OAAS,WACdC,IAAUC,eAAeC,OAAOC,aAChC,MAAqE,EAAKC,MAAMC,KAAxEC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,WAAYC,EAAxD,EAAwDA,SAClDC,EAAS,uCAAmCL,EAAnC,qBAA2DC,GAKlEK,EAAU,EAAKT,MAAfS,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUP,IAAOQ,IAAI,CACzBC,QAAS,eACTC,WAAYZ,EAAMa,yBAClBT,OAAQ,wBACRC,aAAc,OACdS,QAAS,YACTN,OAAQ,WACRO,SAAU,MACVC,WAAalB,EAAwB,SAAb,aAIpBb,EAAOiB,IAAOQ,IAAI,CACtBC,QAAS,OAETM,WAAW,GAAD,OAAKjB,EAAMkB,KAAX,sCACVZ,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAAChB,GACC,OAAIA,EAAME,OACD0B,YAAP,8IAOKA,YAAP,6BAIIC,EAAgB,CACpBC,IACAC,KAEIC,EAAa,CACjBC,KADiB,mBAEb3B,EAAa,CAAC4B,KAAa,KAGjC,OACE,kBAAC,EAAD,CAAMhC,OAAQA,GACZ,kBAACQ,EAAD,CAAQyB,IAAK3B,EAAW4B,IAAI,UAAUC,UAAU,UAChD,kBAACnB,EAAD,KACE,kBAAC,IAAD,CACEW,cAAeA,EACfG,cAAa,sBAAMA,GAAN,CAAqB,CAACM,IAAiB,CAACC,QAAQ,OAE5DlC,M,yBA7EMmC,MAqFJC,cAAwB/C,GCxGvCgD,IAAS/C,OACP,kBAAC,IAAMgD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.87350243.chunk.js","sourcesContent":["import {\r\n  // eslint-disable-next-line \r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport styled from '@emotion/styled'\r\nimport { css } from '@emotion/react'\r\n\r\nimport ReactMarkdown from \"react-markdown\"\r\nimport remarkMath from \"remark-math\"\r\nimport rehypeKatex from \"rehype-katex\"\r\nimport rehypeRaw from \"rehype-raw\"\r\nimport remarkGfm from \"remark-gfm\"\r\nimport rehypeHighlight from \"rehype-highlight\"\r\n\r\nimport 'katex/dist/katex.min.css'\r\nimport 'highlight.js/styles/monokai-sublime.css'\r\n\r\n// import ReactHtmlParser from 'react-html-parser'\r\n\r\n\r\nclass Chat extends StreamlitComponentBase {\r\n  public render = (): ReactNode => {\r\n    Streamlit.setFrameHeight(window.innerHeight)\r\n    const { isUser, avatarStyle, seed, message, allow_html, is_table } = this.props.args;\r\n    const avatarUrl = `https://api.dicebear.com/5.x/${avatarStyle}/svg?seed=${seed}`\r\n    \r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    \r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (!theme) {\r\n      return <div>Theme is undefined, please check streamlit version.</div>\r\n    }\r\n    \r\n    // styles for the avatar image\r\n    const Avatar = styled.img({\r\n      border: `1px solid transparent`,\r\n      borderRadius: '50%',\r\n      height: '3rem',\r\n      width: '3rem',\r\n      margin: 0\r\n    })\r\n    \r\n    // styles for the message box\r\n    const Message = styled.div({\r\n      display: 'inline-block',\r\n      background: theme.secondaryBackgroundColor,\r\n      border: '1px solid transparent',\r\n      borderRadius: '10px',\r\n      padding: '10px 14px',\r\n      margin: '5px 20px',\r\n      maxWidth: '70%',\r\n      whiteSpace: !is_table ? 'pre-line' : 'normal'\r\n    })\r\n    \r\n    // styles for the container\r\n    const Chat = styled.div({\r\n      display: 'flex',\r\n      // flexDirection: 'row',\r\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \r\n      height: 'auto',\r\n      margin: 0,\r\n      width: '100%'\r\n    }, \r\n    (props: {isUser: boolean}) => {  // specific styles\r\n      if (props.isUser){\r\n        return css`\r\n          flex-direction: row-reverse;\r\n          & > div {\r\n            text-align: right;\r\n          }\r\n        `\r\n      }\r\n      return css``\r\n    })\r\n\r\n    // Init React Markdown plugins\r\n    const remarkPlugins = [\r\n      remarkMath, \r\n      remarkGfm\r\n    ]\r\n    const rehypePlugins = [\r\n      rehypeKatex,\r\n      ...(allow_html ? [rehypeRaw] : [])\r\n    ]\r\n\r\n    return (\r\n      <Chat isUser={isUser}>\r\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\r\n        <Message>\r\n          <ReactMarkdown \r\n            remarkPlugins={remarkPlugins}\r\n            rehypePlugins={[...rehypePlugins, [rehypeHighlight, {detect: true}]]}\r\n          >\r\n            {message}\r\n          </ReactMarkdown>\r\n        </Message>\r\n      </Chat>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(Chat);\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Chat from \"./stChat\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Chat />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}