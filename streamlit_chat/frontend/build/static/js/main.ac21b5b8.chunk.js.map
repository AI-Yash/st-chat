{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","Streamlit","setFrameHeight","window","innerHeight","props","args","isUser","avatarStyle","seed","message","logo","avatarUrl","theme","Avatar","styled","img","border","borderRadius","height","width","margin","Message","div","display","background","secondaryBackgroundColor","padding","whiteSpace","fontFamily","font","css","CopyButton","button","position","top","right","verticalAlign","opacity","src","alt","draggable","style","textAlign","onClick","copy","alert","title","xmlns","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","x","y","rx","ry","d","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gTAYMA,E,4MACGC,OAAS,WACdC,IAAUC,eAAeC,OAAOC,aAChC,MAAqD,EAAKC,MAAMC,KAAxDC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,KACtCC,EAAcD,GAAF,uCAAgDH,EAAhD,qBAAwEC,GAKlFI,EAAU,EAAKR,MAAfQ,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBACPC,aAAc,MACdC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUP,IAAOQ,IAAI,CACzBC,QAAS,eACTC,WAAYZ,EAAMa,yBAClBT,OAAQ,wBACRC,aAAc,OACdS,QAAS,YACTN,OAAQ,WAERO,WAAY,aAIR7B,EAAOgB,IAAOQ,IAAI,CACtBC,QAAS,OAETK,WAAW,GAAD,OAAKhB,EAAMiB,KAAX,sCACVX,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAEP,SAACf,GACC,OAAIA,EAAME,OACDwB,YAAP,8IAOKA,YAAP,6BAGEC,EAAajB,IAAOkB,OAAO,CAE/BJ,WAAW,GAAD,OAAKhB,EAAMiB,KAAX,sCACVT,OAAQ,EACRJ,OAAQ,OACRC,aAAc,UACdgB,SAAU,WACVC,IAAK,MACLC,MAAO,OACPC,cAAe,MACfC,QAAQ,MACRb,WAAYZ,EAAMa,yBAClB,SAAS,CAACY,QAAQ,UAElB,SAACjC,GACC,IAAKA,EAAME,OACT,OAAOwB,YAAP,mUAwBN,OACE,kBAAC,EAAD,CAAMxB,OAAQA,GACZ,kBAACO,EAAD,CAAQyB,IAAK3B,EAAW4B,IAAI,UAAUC,UAAU,UAChD,6BACE,kBAACnB,EAAD,CAASoB,MAAO,CAACC,UAAU,SACxBjC,GAEH,kBAACsB,EAAD,CAAYzB,QAASA,EAAQqC,QAhBlB,WACfC,IAAKnC,GACLoC,MAAM,gBAc8CC,MAAM,iBACnD,yBAAKC,MAAM,6BAA6B5B,MAAM,KAAKD,OAAO,KAAK8B,QAAQ,YAAYC,KAAK,OAAOC,OAAO,eAAeC,eAAa,IAAIC,iBAAe,QAAQC,kBAAgB,SAAQ,0BAAMC,EAAE,IAAIC,EAAE,IAAIpC,MAAM,KAAKD,OAAO,KAAKsC,GAAG,IAAIC,GAAG,MAAW,0BAAMC,EAAE,iE,yBA3GrPC,KAoHJC,cAAwB9D,GC5HvC+D,IAAS9D,OACP,kBAAC,IAAM+D,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ac21b5b8.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport { transform } from \"typescript\"\nimport copy from 'copy-to-clipboard';\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    Streamlit.setFrameHeight(window.innerHeight)\n    const { isUser, avatarStyle, seed, message, logo } = this.props.args;\n    const avatarUrl = !!logo ? logo : `https://api.dicebear.com/5.x/${avatarStyle}/svg?seed=${seed}`\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n\n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      borderRadius: '50%',\n      height: '3rem',\n      width: '3rem',\n      margin: 0\n    })\n\n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      // maxWidth: '70%',\n      whiteSpace: 'pre-line'\n    })\n\n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      // flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`,\n      height: 'auto',\n      margin: 0,\n      width: '100%'\n    },\n      (props: { isUser: boolean }) => {  // specific styles\n        if (props.isUser) {\n          return css`\n          flex-direction: row-reverse;\n          & > div {\n            text-align: right;\n          }\n        `\n        }\n        return css``\n      })\n\n    const CopyButton = styled.button({\n\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`,\n      margin: 0,\n      border: 'None',\n      borderRadius: '0.75rem',\n      position: 'absolute',\n      top: '5px',\n      right: '20px',\n      verticalAlign: 'top',\n      opacity:'30%',\n      background: theme.secondaryBackgroundColor,\n      \":hover\":{opacity:'100%'}\n    },\n      (props: { isUser: boolean }) => {  // specific styles\n        if (!props.isUser) {\n          return css`\n          pointer-events: auto;\n          height: 2.5rem;\n          padding: 0px;\n          width: 2.5rem;\n          border: none;\n          background-color: transparent;\n          color: rgba(49, 51, 63, 0.6);\n          border-radius: 0.75rem;\n          transform: scale(0);\n      `\n        }\n      })\n\n\n    const copytext = () => {\n      copy(message)\n      alert('Text copied');\n    }\n    const displaymessage = () => {\n      return \"Click to copy\"\n    }\n\n\n    return (\n      <Chat isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\" />\n        <div>\n          <Message style={{textAlign:'left'}}>\n            {message}\n          </Message>\n          <CopyButton isUser={!isUser} onClick={copytext} title=\"Click to copy\">\n             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>\n          </CopyButton>\n        </div>\n\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}