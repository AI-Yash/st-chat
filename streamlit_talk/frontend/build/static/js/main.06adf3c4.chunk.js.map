{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","avatarUrl","props","args","isUser","avatarStyle","seed","message","useTypewriter","startsWith","theme","Avatar","styled","img","border","height","width","margin","Message","div","display","background","secondaryBackgroundColor","borderRadius","padding","maxWidth","whiteSpace","fontFamily","font","css","src","alt","draggable","options","delay","cursor","onCreateTextNode","character","Streamlit","setFrameHeight","document","createTextNode","onInit","typewriter","typeString","callFunction","state","stop","start","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"8SAYMA,E,4MACGC,OAAS,WACd,IACIC,EADJ,EAA8D,EAAKC,MAAMC,KAAjEC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,cAG1CP,EADEI,EAAYI,WAAW,UAEhBJ,EAAYI,WAAW,cADpBJ,EAIH,2CAAuCA,EAAvC,YAAsDC,EAAtD,QAMX,IAAQI,EAAU,EAAKR,MAAfQ,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBAEPC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUN,IAAOO,IAAI,CACzBC,QAAS,eACTC,WAAYX,EAAMY,yBAClBR,OAAQ,wBACRS,aAAc,OACdC,QAAS,YACTP,OAAQ,WACRQ,SAAU,MACVC,WAAY,aAIR3B,EAAOa,IAAOO,IAAI,CACtBC,QAAS,OAETO,WAAW,GAAD,OAAKjB,EAAMkB,KAAX,sCACVb,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAACd,GACC,OAAIA,EAAME,OACDyB,YAAP,6KAQKA,YAAP,6BASF,OAAKzB,GAAUI,EAEX,kBAAC,EAAD,CAAMJ,OAAQA,GACZ,kBAACO,EAAD,CAAQmB,IAAK7B,EAAW8B,IAAI,UAAUC,UAAU,UAChD,kBAACd,EAAD,KACE,kBAAC,IAAD,CACEe,QAAS,CACPC,MAAO,GACPC,OAAQ,GACRC,iBAdwB,SAASC,GAE3C,OADAC,IAAUC,iBACHC,SAASC,eAAeJ,KAcvBK,OAAQ,SAAAC,GACNA,EACGC,WACCrC,GAEDsC,cAAa,SAAAC,GACZH,EAAWI,UAEZC,aAiBX,kBAAC,EAAD,CAAM5C,OAAQA,GACZ,kBAACO,EAAD,CAAQmB,IAAK7B,EAAW8B,IAAI,UAAUC,UAAU,UAChD,kBAACd,EAAD,KAAUX,K,yBA9GD0C,KAqHJC,cAAwBnD,GC7HvCoD,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,W","file":"static/js/main.06adf3c4.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\nimport Typewriter from 'typewriter-effect'\n\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    const { isUser, avatarStyle, seed, message, useTypewriter } = this.props.args;\n    let avatarUrl\n    if (avatarStyle.startsWith(\"https\")) {\n      avatarUrl = avatarStyle\n    } else if (avatarStyle.startsWith(\"data:image\")) {\n      avatarUrl = avatarStyle\n    } else {\n      avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n    }\n    \n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    \n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    \n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      // borderRadius: '50%',\n      height: '3rem',\n      width: '3rem',\n      margin: 0,\n    })\n    \n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      maxWidth: '70%',\n      whiteSpace: 'pre-wrap',\n    })\n    \n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      // flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          flex-direction: row-reverse;\n          & > div {\n            text-align: right;\n          }\n          padding-right: 5px;\n        `\n      }\n      return css``\n    })\n\n    // custom callback\n    var refreshStreamlitAndCreateNode = function(character: string) {\n      Streamlit.setFrameHeight();\n      return document.createTextNode(character)\n    }\n\n    if (!isUser && useTypewriter) {\n      return (\n        <Chat isUser={isUser}>\n          <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n          <Message>\n            <Typewriter\n              options={{\n                delay: 10,\n                cursor: '',\n                onCreateTextNode: refreshStreamlitAndCreateNode\n              }}\n              onInit={typewriter => {\n                typewriter\n                  .typeString(\n                    message\n                  )\n                  .callFunction(state => {\n                    typewriter.stop();\n                  })\n                  .start();\n              }}\n            />\n          </Message>\n        </Chat>\n      )\n    } else if (!isUser && !useTypewriter) {\n      return (\n        <Chat isUser={isUser}>\n          <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n          <Message>\n            {message}\n          </Message>\n        </Chat>\n      )\n    } else {\n      return (\n        <Chat isUser={isUser}>\n          <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n          <Message>{message}</Message>\n        </Chat>\n      )\n    }\n  } \n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}