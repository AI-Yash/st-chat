{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["Chat","render","avatarUrl","props","args","isUser","avatarStyle","seed","message","startsWith","theme","Avatar","styled","img","border","height","width","margin","Message","div","display","background","secondaryBackgroundColor","borderRadius","padding","maxWidth","fontFamily","font","css","src","alt","draggable","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6RAWMA,E,4MACGC,OAAS,WACd,IACIC,EADJ,EAA+C,EAAKC,MAAMC,KAAlDC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,QAGjCN,EADEI,EAAYG,WAAW,UAEhBH,EAAYG,WAAW,cADpBH,EAIH,2CAAuCA,EAAvC,YAAsDC,EAAtD,QAMX,IAAQG,EAAU,EAAKP,MAAfO,MAIR,IAAKA,EACH,OAAO,oFAIT,IAAMC,EAASC,IAAOC,IAAI,CACxBC,OAAO,wBAEPC,OAAQ,OACRC,MAAO,OACPC,OAAQ,IAIJC,EAAUN,IAAOO,IAAI,CACzBC,QAAS,eACTC,WAAYX,EAAMY,yBAClBR,OAAQ,wBACRS,aAAc,OACdC,QAAS,YACTP,OAAQ,WACRQ,SAAU,QAINzB,EAAOY,IAAOO,IAAI,CACtBC,QAAS,OAETM,WAAW,GAAD,OAAKhB,EAAMiB,KAAX,sCACVZ,OAAQ,OACRE,OAAQ,EACRD,MAAO,SAET,SAACb,GACC,OAAIA,EAAME,OACDuB,YAAP,6KAQKA,YAAP,6BAGF,OACE,kBAAC,EAAD,CAAMvB,OAAQA,GACZ,kBAACM,EAAD,CAAQkB,IAAK3B,EAAW4B,IAAI,UAAUC,UAAU,UAChD,kBAACb,EAAD,KAAUV,K,yBApECwB,KA0EJC,cAAwBjC,GCjFvCkC,IAASjC,OACP,kBAAC,IAAMkC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.dde51873.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/react'\n\n\nclass Chat extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    const { isUser, avatarStyle, seed, message } = this.props.args;\n    let avatarUrl\n    if (avatarStyle.startsWith(\"https\")) {\n      avatarUrl = avatarStyle\n    } else if (avatarStyle.startsWith(\"data:image\")) {\n      avatarUrl = avatarStyle\n    } else {\n      avatarUrl = `https://avatars.dicebear.com/api/${avatarStyle}/${seed}.svg`\n    }\n    \n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    \n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (!theme) {\n      return <div>Theme is undefined, please check streamlit version.</div>\n    }\n    \n    // styles for the avatar image\n    const Avatar = styled.img({\n      border: `1px solid transparent`,\n      // borderRadius: '50%',\n      height: '3rem',\n      width: '3rem',\n      margin: 0,\n    })\n    \n    // styles for the message box\n    const Message = styled.div({\n      display: 'inline-block',\n      background: theme.secondaryBackgroundColor,\n      border: '1px solid transparent',\n      borderRadius: '10px',\n      padding: '10px 14px',\n      margin: '5px 20px',\n      maxWidth: '70%'\n    })\n    \n    // styles for the container\n    const Chat = styled.div({\n      display: 'flex',\n      // flexDirection: 'row',\n      fontFamily: `${theme.font}, 'Segoe UI', 'Roboto', sans-serif`, \n      height: 'auto',\n      margin: 0,\n      width: '100%'\n    }, \n    (props: {isUser: boolean}) => {  // specific styles\n      if (props.isUser){\n        return css`\n          flex-direction: row-reverse;\n          & > div {\n            text-align: right;\n          }\n          padding-right: 5px;\n        `\n      }\n      return css``\n    })\n\n    return (\n      <Chat isUser={isUser}>\n        <Avatar src={avatarUrl} alt=\"profile\" draggable=\"false\"/>\n        <Message>{message}</Message>\n      </Chat>\n    )\n  }\n}\n\nexport default withStreamlitConnection(Chat);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}